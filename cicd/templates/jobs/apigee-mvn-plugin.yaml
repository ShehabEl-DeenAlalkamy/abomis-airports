parameters:
  - name: apiVersion
    type: string
    values:
      - apigeeapi
      - googleapi
  - name: jobName
    type: string
    default: ApigeeMvnBuild
  - name: displayName
    type: string
    default: Apigee Maven Build
  - name: dependsOn
    type: object
    default: []
  - name: mandatoryTasks
    type: stepList
    default: []

jobs:
  - job: ${{ parameters.jobName }}
    displayName: ${{ parameters.displayName }}
    dependsOn:
      - ${{ each dependency in parameters.dependsOn }}:
          - ${{ dependency }}
    variables:
      - template: ../vars/${{ parameters.apiVersion }}-vars.yaml
    steps:
      - ${{ parameters.mandatoryTasks }}

      - checkout: self
        path: s/$(Build.Repository.Name)
        persistCredentials: true

      - bash: |
          readonly ADO_DEBUG_CMD="##[debug]"
          echo "${ADO_DEBUG_CMD}"generating sa.json key file.
          echo "${GCP_SA}" > sa.json
        condition: eq('${{ parameters.apiVersion }}', 'googleapi')
        displayName: Generate SA Key File
        env:
          GCP_SA: $(gcpServiceAccount)

      - task: Maven@3.205.1
        displayName: Deploy X/Hybrid
        condition: eq('${{ parameters.apiVersion }}', 'googleapi')
        inputs:
          mavenPomFile: "./pom.xml"
          mavenOptions: "-Xmx3072m"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.8"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          goals: install -P${{ parameters.apiVersion }} -Dorg=$(org) -Denv=$(env) -Dsa=sa.json

      - task: Maven@3.205.1
        displayName: Deploy Edge
        condition: eq('${{ parameters.apiVersion }}', 'apigeeapi')
        inputs:
          mavenPomFile: "./pom.xml"
          mavenOptions: "-Xmx3072m"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.8"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          goals: install -P${{ parameters.apiVersion }} -Dorg=$(org) -Denv=$(env) -Dusername=$(username) -Dpassword=$(EDGE_PASS)
        env:
          EDGE_PASS: $(edgePass)

      - bash: |
          readonly ADO_DEBUG_CMD="##[debug]"
          echo "${ADO_DEBUG_CMD}"creating "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target
          mkdir -p "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target
          proxy_bundle_file=$(basename $(find target -name "*.zip"))
          echo "${ADO_DEBUG_CMD}"copying target/"${proxy_bundle_file}" to "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target/
          cp  target/"${proxy_bundle_file}" "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target
          echo "##vso[task.setvariable variable=Framework.Mvn.Artifacts.ProxyBundleFile]${proxy_bundle_file}"
          if [[ -d target/test/integration || -d target/tests/integration ]]; then
                echo "${ADO_DEBUG_CMD}"target/test/integration or target/tests/integration artifacts found
                echo "${ADO_DEBUG_CMD}"creating "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target/integration
                mkdir -p "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target/integration                
                echo "${ADO_DEBUG_CMD}"copying target/test/integration or target/tests/integration to "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target/integration
                cp -r target/test*/integration/* "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target/integration
                echo "${ADO_DEBUG_CMD}"Framework.Mvn.Artifacts.Integration: true
                echo "##vso[task.setvariable variable=Framework.Mvn.Artifacts.Integration;isOutput=true]true"
                echo "${ADO_DEBUG_CMD}"Framework.Mvn.Artifacts.Integration.Name: integration-test-scripts
                echo "##vso[task.setvariable variable=Framework.Mvn.Artifacts.Integration.Name;isOutput=true]integration-test-scripts"
          else
                echo "${ADO_DEBUG_CMD}"Framework.Mvn.Artifacts.Integration: false
                echo "##vso[task.setvariable variable=Framework.Mvn.Artifacts.Integration;isOutput=true]false"
          fi
        name: ArtifactsStagingStep
        displayName: Artifacts Staging

      - task: PublishBuildArtifacts@1
        displayName: "Publish: Proxy Bundle"
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)/target/$(Framework.Mvn.Artifacts.ProxyBundleFile)
          artifactName: proxy-bundle

      - task: PublishBuildArtifacts@1
        displayName: "Publish: Integration Test Scripts"
        condition: eq(variables['ArtifactsStagingStep.Framework.Mvn.Artifacts.Integration'], 'true')
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)/target/integration
          artifactName: $(ArtifactsStagingStep.Framework.Mvn.Artifacts.Integration.Name)

      - bash: |
          readonly ADO_DEBUG_CMD="##[debug]"
          echo "${ADO_DEBUG_CMD}"deleting "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target.
          rm -rf "${BUILD_ARTIFACTSTAGINGDIRECTORY}"/target
          [[ "${API_VERSION}" == 'googleapi' ]] && echo "${ADO_DEBUG_CMD}"deleting sa.json.; rm -rf sa.json
        displayName: Artifacts Cleaning
        env:
          API_VERSION: ${{ parameters.apiVersion }}
